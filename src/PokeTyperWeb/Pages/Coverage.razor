@page "/coverage"

<h3>Coverage</h3>

<p>Figure out which types are "covered by", or weak to, a particular Pokemon move set. For example, a fire-type move is super effective against ("covers") bug, steel, grass, and ice type Pokemon.</p>

<p>Input up to four move types below and click "Get coverage".</p>

<p>
    <input list="types" placeholder="Move type 1" @bind="type1" @onkeyup="OnKeyUp" onfocus="this.value=''" />
    <input list="types" placeholder="Move type 2" @bind="type2" @onkeyup="OnKeyUp" onfocus="this.value=''" />
    <input list="types" placeholder="Move type 3" @bind="type3" @onkeyup="OnKeyUp" onfocus="this.value=''" />
    <input list="types" placeholder="Move type 4" @bind="type4" @onkeyup="OnKeyUp" onfocus="this.value=''" />

    <datalist id="types">
        @{
            Array tokens = Enum.GetValues(typeof(TypeToken));
            var names = new List<string>(tokens.Length);
            foreach (TypeToken t in tokens)
            {
                names.Add(t.ToString());
            }
            names.Sort();
            foreach (string n in names)
            {
                <option value="@n" />
            }
        }
    </datalist>
</p>

<p><button @onclick="GetCoverage">Get coverage</button></p>

@if (error != null)
{
    <p>Error: @error</p>
}
else if (coverage != null)
{
    <!-- TODO: Change the below to use icons instead of text. -->
    <h4><b>@coverage.Name Coverage</b></h4>
    <h5><b>Super Effective</b></h5>
    <h6>2x Effectiveness</h6>
    <ul>
        @foreach (var t in coverage.Effective2x)
        {
            <li>@t.Name</li>
        }
    </ul>
    <h6>4x Effectiveness</h6>
    <ul>
        @foreach (var t in coverage.Effective4x)
        {
            <li>@t.Name</li>
        }
    </ul>
    <h5><b>Not Very Effective</b></h5>
    <h6>1/2x Effectiveness</h6>
    <ul>
        @foreach (var t in coverage.Effective05x)
        {
            <li>@t.Name</li>
        }
    </ul>
    <h6>1/4x Effectiveness</h6>
    <ul>
        @foreach (var t in coverage.Effective025x)
        {
            <li>@t.Name</li>
        }
    </ul>
    <h6>0x Effectiveness</h6>
    <ul>
        @foreach (var t in coverage.Effective0x)
        {
            <li>@t.Name</li>
        }
    </ul>
    <h5><b>Normal Effectiveness (1x)</b></h5>
    <ul>
        @foreach (var t in coverage.Effective1x)
        {
            <li>@t.Name</li>
        }
    </ul>
}

@code {
    private string type1;
    private string type2;
    private string type3;
    private string type4;
    private PokeTyper.Coverage coverage;
    private string error;

    private void OnKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            GetCoverage();
        }
    }

    private bool TryConvertInput(ref string input, ref List<TypeToken> types)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            // Clear the textbox.
            input = string.Empty;
            return true;
        }
        input = input.Trim();
        TypeToken t;
        if (!API.TryConvertStringToType(input, out t))
        {
            error = "Invalid type: \"" + input + "\"";
            return false;
        }
        types.Add(t);
        // Make the value in the textbox matches the type's actual value, e.g. make sure it starts
        // with a capital letter, etc.
        input = t.ToString();
        return true;
    }

    private void GetCoverage()
    {
        coverage = null;
        error = null;
        var types = new List<TypeToken>(4);
        bool succeeded = true;
        succeeded &= TryConvertInput(ref type1, ref types);
        succeeded &= TryConvertInput(ref type2, ref types);
        succeeded &= TryConvertInput(ref type3, ref types);
        succeeded &= TryConvertInput(ref type4, ref types);
        if (!succeeded || types.Count == 0)
        {
            return;
        }
        coverage = API.MakeCoverage(types.ToArray());
    }
}
