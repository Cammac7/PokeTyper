@page "/types"

<h3>Types</h3>

<p>Learn more about any Pokemon type or type combination. Just input one or two types below and click "Make type".</p>

<p>
    <!-- TODO: Add a drop-down listing the available Pokemon types. -->
    <input placeholder="Type 1" @bind="type1" @onkeyup="OnKeyUp" />
    <input placeholder="Type 2" @bind="type2" @onkeyup="OnKeyUp" />
    <button @onclick="MakeType">Make type</button>
</p>

@if (error != null)
{
    <p>Error: @error</p>
}
else if (typeInfo != null)
{
    <h4>@typeInfo.Name</h4>
    <h5>x1/4</h5>
    <ul>
        @foreach (var t in typeInfo.Resist4x)
        {
            <li>@t.ToString()</li>
        }
    </ul>
    <h5>x1/2</h5>
    <ul>
        @foreach (var t in typeInfo.Resist2x)
        {
            <li>@t.ToString()</li>
        }
    </ul>
    <h5>x1</h5>
    <ul>
        @foreach (var t in typeInfo.Normal)
        {
            <li>@t.ToString()</li>
        }
    </ul>
    <h5>x2</h5>
    <ul>
        @foreach (var t in typeInfo.WeakTo2x)
        {
            <li>@t.ToString()</li>
        }
    </ul>
    <h5>x4</h5>
    <ul>
        @foreach (var t in typeInfo.WeakTo4x)
        {
            <li>@t.ToString()</li>
        }
    </ul>
    <h5>x0</h5>
    <ul>
        @foreach (var t in typeInfo.Immune)
        {
            <li>@t.ToString()</li>
        }
    </ul>
}

@code {
    private string type1;
    private string type2;
    private PokemonType typeInfo;
    private string error;

    private void OnKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            MakeType();
        }
    }

    private void MakeType()
    {
        typeInfo = null;
        error = null;
        var types = new List<TypeToken>(2);
        foreach (var type in new string[] { type1, type2 })
        {
            if (!string.IsNullOrWhiteSpace(type))
            {
                TypeToken t;
                if (!API.TryConvertStringToType(type, out t))
                {
                    error = "Invalid type: \"" + type + "\"";
                    return;
                }
                types.Add(t);
            }
        }
        if (types.Count == 0)
        {
            return;
        }
        typeInfo = API.MakeType(types.ToArray());
    }
}
